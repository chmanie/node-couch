// Generated by CoffeeScript 1.4.0
var Couch, parseParams, request;

request = require('request');

parseParams = function(params) {
  var delimiter, i, key, paramString, squotes, value;
  i = 0;
  paramString = '';
  for (key in params) {
    value = params[key];
    if (typeof value === 'string') {
      squotes = '%22';
    } else {
      squotes = '';
    }
    if (i === 0) {
      delimiter = '?';
    } else {
      delimiter = '&';
    }
    paramString = paramString + delimiter + key + '=' + squotes + value + squotes;
    i++;
  }
  return paramString;
};

Couch = (function() {

  function Couch(hostname, db, design) {
    this.hostname = hostname;
    this.db = db;
    this.design = design;
    this.dbroot = this.hostname + '/' + this.db;
  }

  Couch.prototype.view = function(options, callback) {
    var paramstr;
    if (options.params != null) {
      paramstr = parseParams(options.params);
    } else {
      paramstr = '';
    }
    return request({
      url: this.dbroot + '/_design/' + this.design + '/_view/' + options.view + paramstr,
      method: 'GET',
      json: true
    }, function(err, res, body) {
      if (!err) {
        if (body.error != null) {
          return callback(body);
        } else {
          return callback(null, body.rows);
        }
      } else {
        return callback('could not connect to database!');
      }
    });
  };

  Couch.prototype.list = function(options, callback) {
    var paramstr;
    if (options.params != null) {
      paramstr = parseParams(options.params);
    } else {
      paramstr = '';
    }
    return request({
      url: this.dbroot + '/_design/' + this.design + '/_list/' + options.list + '/' + options.view + paramstr,
      method: 'GET',
      json: true
    }, function(err, res, body) {
      if (!err) {
        if (body.error != null) {
          return callback(body);
        } else {
          return callback(null, body);
        }
      } else {
        return callback('could not connect to database!');
      }
    });
  };

  Couch.prototype.doc = function(docid, callback) {
    return request({
      url: this.dbroot + '/' + docid,
      method: 'GET',
      json: true
    }, function(err, res, body) {
      if (!err) {
        if (body.error != null) {
          return callback(body);
        } else {
          return callback(null, body);
        }
      } else {
        return callback('could not connect to database!');
      }
    });
  };

  Couch.prototype.saveDoc = function(doc, callback) {
    var id, reqmethod;
    if (doc._id != null) {
      reqmethod = 'PUT';
      id = doc._id;
    } else {
      reqmethod = 'POST';
      id = '';
    }
    return request({
      url: this.dbroot + '/' + id,
      method: reqmethod,
      json: true,
      body: doc
    }, function(err, res, body) {
      if (!err) {
        if (body.error != null) {
          return callback(body);
        } else {
          return callback(null, body);
        }
      } else {
        return callback('could not connect to database!');
      }
    });
  };

  Couch.prototype.removeDoc = function(doc, callback) {
    if ((doc._id != null) && (doc._rev != null)) {
      return request({
        url: this.dbroot + '/' + doc._id + '?rev=' + doc._rev,
        method: 'DELETE',
        json: true
      }, function(err, res, body) {
        if (!err) {
          if (body.error != null) {
            return callback(body);
          } else {
            return callback(null, body);
          }
        } else {
          return callback('could not connect to database!');
        }
      });
    }
  };

  Couch.prototype.attachment = function(docid, filename) {
    var attach;
    attach = request({
      method: 'GET',
      url: this.dbroot + '/' + docid + '/' + filename
    });
    return attach;
  };

  return Couch;

})();

module.exports = Couch;
